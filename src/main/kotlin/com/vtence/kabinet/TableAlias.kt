package com.vtence.kabinet


class TableAlias<out T : Table>(val delegate: T, private val alias: String) : Table(delegate.tableName) {

    override val tableName: String get() = alias

    override fun appendTo(sql: SqlBuilder) {
        sql.append(aliasedTableName)
    }

    val aliasedTableName: String = "${delegate.tableName} AS $alias"

    private fun <T : Any?> Column<T>.clone() = Column(this@TableAlias, name, type, autoGenerated, nullable)

    override val columns: List<Column<*>> = delegate.columns.map { it.clone() }

    override val fields: List<Field<*>> = columns

    fun <R> originalColumn(column: Column<R>): Column<R>? {
        @Suppress("UNCHECKED_CAST")
        return if (column.table == this)
            delegate.columns.first { column.name == it.name } as Column<R>
        else
            null
    }

    @Suppress("UNCHECKED_CAST")
    override operator fun <R : Any?> get(column: Column<R>): Column<R> =
        delegate[column].clone()

    override fun equals(other: Any?): Boolean {
        if (other !is TableAlias<*>) return false
        return this.aliasedTableName == other.aliasedTableName
    }

    override fun hashCode(): Int = aliasedTableName.hashCode()
}

fun <T : Table> T.alias(alias: String) = TableAlias(this, alias)
