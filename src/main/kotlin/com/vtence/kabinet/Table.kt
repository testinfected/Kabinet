package com.vtence.kabinet


interface ColumnSet: Expression {
    val columns: List<Column<*>>
}

fun List<Column<*>>.autoGenerated() = filter { it.autoGenerated }

fun List<Column<*>>.notAutoGenerated() = filterNot { it.autoGenerated }

val List<Column<*>>.names get() = map { it.name }


open class Table(name: String): ColumnSet {
    val tableName = name
    private val _columns = mutableListOf<Column<*>>()

    override val columns: List<Column<*>> get() = _columns

    override fun appendTo(sql: SqlBuilder) {
        sql.append(tableName)
    }

    fun int(name: String): Column<Int> = add(Column(this, name, IntColumnType))

    fun string(name: String): Column<String> = add(Column(this, name, StringColumnType))

    private fun <T> add(column: Column<T>): Column<T> = column.also { _columns += it }

    fun replaceColumn(old: Column<*>, new: Column<*>): Unit = with(_columns) {
        remove(old)
        add(new)
    }
}


class Slice(private val source: Table, override val columns: List<Column<*>>) : ColumnSet {
    override fun appendTo(sql: SqlBuilder) {
        sql.append(source)
    }
}

fun Table.slice(vararg columns: Column<*>): ColumnSet = slice(columns.toList())

fun Table.slice(columns: List<Column<*>>): ColumnSet = Slice(this, columns)
