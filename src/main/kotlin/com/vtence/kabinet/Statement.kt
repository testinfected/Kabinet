package com.vtence.kabinet

import java.sql.Connection
import java.sql.JDBCType
import java.sql.PreparedStatement
import java.sql.Statement.*


interface Preparable {
    fun <T> prepare(parameters: Iterable<Any?> = listOf(), query: (PreparedStatement) -> T): JdbcStatement<T>
}


interface JdbcStatement<T> {
    fun execute(connection: Connection): T

    fun toSql(): String
}


class PreparedJdbcStatement<T>(
    private val expression: Expression,
    private val query: (PreparedStatement) -> T,
    generateKeys: Boolean
) : JdbcStatement<T> {

    private val autoGeneratedKeys = if (generateKeys) RETURN_GENERATED_KEYS else NO_GENERATED_KEYS

    override fun execute(connection: Connection): T {
        val prepared = connection.prepareStatement(expression.asSql(prepared = true), autoGeneratedKeys)
        prepared.setParameters(expression.arguments())
        return prepared.use(query)
    }

    override fun toSql(): String {
        return expression.asSql()
    }
}


interface StatementExecutor {
    fun <T> execute(statement: JdbcStatement<T>): T

    companion object {
        operator fun invoke(connection: Connection): StatementExecutor {
            return object : StatementExecutor {
                override fun <T> execute(statement: JdbcStatement<T>): T {
                    return statement.execute(connection)
                }
            }
        }
    }
}



