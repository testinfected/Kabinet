package com.vtence.kabinet

import java.sql.PreparedStatement
import java.sql.Statement

class SqlStatement(private val sql: String) : Compilable {
    private val params: MutableMap<String, Any?> = mutableMapOf()

    private var autoGeneratedKeys = Statement.NO_GENERATED_KEYS

    fun retrieveGeneratedKeys() = apply { autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS }

    operator fun set(param: String, value: Any?) {
        params[":$param"] = value
    }

    fun toSql(): String {
        return params.keys
            .sortedBy { it.length }
            .reversed()
            .fold(sql) { sql: String, key: String ->
                sql.replace(key.toRegex(), "?")
            }
    }

    override fun <T> compile(query: (PreparedStatement) -> T): JdbcStatement<T> {
        return JdbcStatement(toSql()) { connection ->
            val statement = connection.prepareStatement(toSql(), autoGeneratedKeys)
            statement.setParameters(parameters(sql).map { params[it] })
            statement.use(query)
        }
    }

    override fun toString(): String = toSql()
}

private val PARAM = Regex("(:\\w+)")

private fun parameters(sql: String): List<String> = PARAM.findAll(sql).map { it.value }.toList()
