package com.vtence.kabinet

import java.sql.PreparedStatement

class ParameterizedStatement(private val sql: String) : Preparable, Expression<Nothing> {
    private var autoGeneratedKeys: Boolean = false
    private val data: MutableMap<String, Any?> = mutableMapOf()

    private val parameterNames: List<String>
        get() = PARAM.findAll(sql).map { it.value }.toList()

    fun retrieveGeneratedKeys() = apply { autoGeneratedKeys = true }

    operator fun set(name: String, value: Any?) {
        data[":$name"] = value
    }

    override fun build(statement: SqlBuilder) = statement {
        val (sql, args) = prepareSql()
        +sql.asExpression<Any?>(args)
    }

    private fun prepareSql(): Pair<String, List<Any?>> {
        val args = mutableMapOf<Int, String>()

        val statement = parameterNames
            .sortedByDescending { it }
            .fold(sql) { sql, name ->
                name.toRegex().replace(sql) {
                    args[it.range.first] = name
                    "?"
                }
            }

        val parameters = args.toSortedMap().values.map { data[it] }
        return statement to parameters
    }

    override fun <T> prepare(query: (PreparedStatement) -> T): JdbcStatement<T> {
        return PreparedJdbcStatement(this, query, autoGeneratedKeys)
    }

    override fun toString(): String = toSql(false)

    companion object {
        private val PARAM = Regex("(:\\w+)")
    }
}


