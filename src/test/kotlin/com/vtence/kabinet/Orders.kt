package com.vtence.kabinet

import com.natpryce.hamkrest.equalTo
import com.natpryce.hamkrest.has
import java.math.BigDecimal
import java.time.Instant


data class Order(
    var id: Int? = null,
    val number: String,
    val placedAt: Instant = Instant.now(),
    val lines: List<LineItem> = listOf(),
) {
    operator fun plus(item: Item): Order = copy(lines = lines + item.lineFor(this))

    val total: BigDecimal get() = lines.fold(BigDecimal.ZERO) { total, item -> total + item.total }
}


data class LineItem(
    val id: Int? = null,
    val orderId: Int?,
    val itemNumber: String,
    val itemUnitPrice: BigDecimal
) {
    val quantity = 1

    val total: BigDecimal get() = itemUnitPrice * quantity.toBigDecimal()

    override fun toString(): String {
        return "$itemNumber ($itemUnitPrice$ x $quantity)"
    }
}


fun Item.lineFor(order: Order): LineItem {
    return LineItem(orderId = order.id, itemNumber = number, itemUnitPrice = price)
}


object Orders : Table("orders") {
    val id = int("id").autoGenerated()
    val number = string("number")
    val placedAt = timestamp("placed_at")
}

private fun dehydrate(order: Order): Orders.(Dataset) -> Unit = {
    it[number] = order.number
    it[placedAt] = order.placedAt
}

private fun Orders.hydrate(row: ResultRow): Order {
    return Order(
        id = row[id],
        number = row[number],
        placedAt = row[placedAt],
    )
}

val Order.record: Orders.(Dataset) -> Unit
    get() = dehydrate(this)

val ResultRow.order: Order
    get() = Orders.hydrate(this)


object OrderThat {
    fun hasNumber(number: String) = has(Order::number, equalTo(number))
}
